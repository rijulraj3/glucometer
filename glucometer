import json
import os
import random
import time

class Glucometer:
    def __init__(self, filename="glucose_readings.json"):
        self.filename = filename
        self.readings = []
        self.load_readings()

    def load_readings(self):
        """Load previous glucose readings from JSON file."""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as file:
                    self.readings = json.load(file)
                print("Glucose readings loaded successfully.")
            except json.JSONDecodeError:
                print("Error loading readings. Starting with an empty database.")
                self.readings = []
        else:
            print("No readings file found. Starting with an empty database.")

    def save_readings(self):
        """Save glucose readings to JSON file."""
        try:
            with open(self.filename, 'w') as file:
                json.dump(self.readings, file, indent=4)
            print("Readings saved successfully.")
        except Exception as e:
            print(f"Error saving readings: {e}")

    def simulate_glucose_reading(self):
        """Simulate a blood glucose reading (mg/dL)."""
        # Simulate realistic glucose levels (50â€“300 mg/dL)
        return random.randint(50, 300)

    def interpret_reading(self, glucose_level):
        """Interpret glucose level based on fasting ranges (mg/dL)."""
        if glucose_level < 70:
            return "Hypoglycemia (Low)"
        elif 70 <= glucose_level <= 99:
            return "Normal"
        elif 100 <= glucose_level <= 125:
            return "Prediabetes"
        else:  # >= 126
            return "Diabetes"

    def record_reading(self, patient_id, glucose_level=None):
        """Record a new glucose reading."""
        if glucose_level is None:
            glucose_level = self.simulate_glucose_reading()
        else:
            try:
                glucose_level = float(glucose_level)
            except ValueError:
                print("Invalid glucose level. Please enter a number.")
                return

        status = self.interpret_reading(glucose_level)
        reading = {
            "patient_id": patient_id,
            "glucose_level": glucose_level,
            "unit": "mg/dL",
            "status": status,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        self.readings.append(reading)
        self.save_readings()

        print("\n--- Glucose Reading ---")
        print(f"Patient ID: {patient_id}")
        print(f"Glucose Level: {glucose_level} mg/dL")
        print(f"Status: {status}")
        print(f"Time: {reading['timestamp']}")
        print("----------------------")

    def view_readings(self):
        """Display all glucose readings."""
        if not self.readings:
            print("No glucose readings available.")
            return
        print("\n--- Glucose Reading History ---")
        for reading in self.readings:
            print(f"Patient ID: {reading['patient_id']}, Glucose: {reading['glucose_level']} mg/dL, "
                  f"Status: {reading['status']}, Time: {reading['timestamp']}")
        print("-----------------------------")

def main():
    glucometer = Glucometer()

    while True:
        print("\n=== Glucometer Simulator ===")
        print("1. Record New Glucose Reading")
        print("2. View All Readings")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ")

        if choice == "1":
            patient_id = input("Enter Patient ID: ")
            glucose_input = input("Enter glucose level (mg/dL) or press Enter to simulate: ")
            if glucose_input:
                glucometer.record_reading(patient_id, glucose_input)
            else:
                glucometer.record_reading(patient_id)

        elif choice == "2":
            glucometer.view_readings()

        elif choice == "3":
            print("Exiting glucometer. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
